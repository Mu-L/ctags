#
# list kinds C
#
d  macro definitions
e  enumerators (values inside an enumeration)
f  function definitions
g  enumeration names
h  included header files
l  local variables [off]
m  struct, and union members
p  function prototypes [off]
s  structure names
t  typedefs
u  union names
v  variable definitions
x  external and forward variable declarations [off]
z  function parameters inside function or prototype definitions [off]
L  goto labels [off]
D  parameters inside macro definitions [off]
#
# list kinds Event
#
e  events
#
# list kinds Hook
#
h  hooks
#
# list kinds Plugin
#
f  files
n  name
#
# list kinds-full C
#
#LETTER NAME       ENABLED REFONLY NROLES MASTER VER DESCRIPTION
D       macroparam no      no      0      C        0 parameters inside macro definitions
L       label      no      no      0      C        0 goto labels
d       macro      yes     no      2      C        0 macro definitions
e       enumerator yes     no      0      C        0 enumerators (values inside an enumeration)
f       function   yes     no      2      C        0 function definitions
g       enum       yes     no      0      C        0 enumeration names
h       header     yes     yes     2      C        0 included header files
l       local      no      no      0      C        0 local variables
m       member     yes     no      0      C        0 struct, and union members
p       prototype  no      no      0      C        0 function prototypes
s       struct     yes     no      1      C        0 structure names
t       typedef    yes     no      0      C        0 typedefs
u       union      yes     no      0      C        0 union names
v       variable   yes     no      0      C        0 variable definitions
x       externvar  no      no      0      C        0 external and forward variable declarations
z       parameter  no      no      0      C        0 function parameters inside function or prototype definitions
#
# list kinds-full Event
#
#LETTER NAME  ENABLED REFONLY NROLES MASTER VER DESCRIPTION
e       event yes     no      0      NONE     0 events
#
# list kinds-full Hook
#
#LETTER NAME ENABLED REFONLY NROLES MASTER VER DESCRIPTION
h       hook yes     no      0      NONE     0 hooks
#
# list kinds-full Plugin
#
#LETTER NAME ENABLED REFONLY NROLES MASTER VER DESCRIPTION
f       File yes     no      0      NONE     0 files
n       name yes     no      0      NONE     0 name
C only
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int

C + EVENT
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int

C + EVENT + HOOK
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
h	input.c	/^DEFINE_HOOK(h);$/;"	hook	language:Hook
i	input.c	/^DEFINE_HOOK(i);$/;"	hook	language:Hook
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int

C + EVENT + HOOK + PLUGIN
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
h	input.c	/^DEFINE_HOOK(h);$/;"	hook	language:Hook
i	input.c	/^DEFINE_HOOK(i);$/;"	hook	language:Hook
isearch	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	name	language:Plugin
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int
mylib.so	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	File	language:Plugin

C + EVENT + HOOK + PLUGIN + UA
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
h	input.c	/^DEFINE_HOOK(h);$/;"	hook	language:Hook
i	input.c	/^DEFINE_HOOK(i);$/;"	hook	language:Hook
isearch	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	name	language:Plugin
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int
mylib.so	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	File	language:Plugin
u	input.c	/^	int u __attribute__((unused));$/;"	varaible	language:UnusedAttr

C(disabled) + EVENT + HOOK + PLUGIN + UA

C + EVENT(disabled) + HOOK + PLUGIN + UA
isearch	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	name	language:Plugin
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int
mylib.so	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	File	language:Plugin

C + EVENT + HOOK(disabled) + PLUGIN + UA
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
isearch	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	name	language:Plugin
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int
mylib.so	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	File	language:Plugin
u	input.c	/^	int u __attribute__((unused));$/;"	varaible	language:UnusedAttr

C + EVENT + HOOK + PLUGIN + UA(-v)
a	input.c	/^DEFINE_EVENT(a);$/;"	event	language:Event
b	input.c	/^DEFINE_EVENT(b);$/;"	event	language:Event
h	input.c	/^DEFINE_HOOK(h);$/;"	hook	language:Hook
i	input.c	/^DEFINE_HOOK(i);$/;"	hook	language:Hook
isearch	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	name	language:Plugin
main	input.c	/^main(void)$/;"	function	language:C	typeref:typename:int
mylib.so	input.c	/^	LOAD_PLUGIN(mylib.so, isearch);$/;"	File	language:Plugin
List subparsers of C ( EVENT + HOOK + PLUGIN + UA )
#NAME   BASEPARSER DIRECTIONS
Event   C          base => sub {shared}
JNI     C          base <> sub {bidirectional}
Plugin  C          base => sub {shared}
List subparsers of C ( EVENT + HOOK + PLUGIN + UA ) without the header
Event   C          base => sub {shared}
JNI     C          base <> sub {bidirectional}
Plugin  C          base => sub {shared}
List subparsers of C ( EVENT + HOOK + PLUGIN + UA ) in machinable
#NAME	BASEPARSER	DIRECTIONS
Event	C	base => sub {shared}
JNI	C	base <> sub {bidirectional}
Plugin	C	base => sub {shared}
List subparsers of C ( EVENT + HOOK + PLUGIN + UA ) in machinable without the header
Event	C	base => sub {shared}
JNI	C	base <> sub {bidirectional}
Plugin	C	base => sub {shared}
